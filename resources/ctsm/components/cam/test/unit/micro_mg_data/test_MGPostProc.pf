module test_MGPostProc

use pfunit_mod

use shr_kind_mod, only: r8 => shr_kind_r8
use micro_mg_data, only: MGPacker, accum_null, accum_mean, MGPostProc

implicit none

integer, parameter :: pcols = 4, pver = 3, dim_t = 2

! Just for convenience, tests will all pack with these settings.
integer, parameter :: mgncol = 2
integer, parameter :: nlev = 2
integer, parameter :: mgcols(mgncol) = [1, 3]
integer, parameter :: top_lev = 2
real(r8), parameter :: fillvalue = -1._r8

type(MGPacker) :: packer
type(MGPostProc) :: post_proc

! Packed test data for the two time steps.
real(r8) :: test_ref(mgncol, nlev, dim_t)
real(r8) :: test_ref_mean(mgncol, nlev)

contains

@Before
subroutine setUp()
  integer :: i, k, m

  do m = 1, dim_t
     do k = 1, nlev
        do i = 1, mgncol
           test_ref(i,k,m) = i + 10._r8*k + 100._r8*m
        end do
     end do
  end do

  test_ref_mean = sum(test_ref, dim=3)/dim_t

  packer = MGPacker(pcols, pver, mgcols, top_lev)
  post_proc = MGPostProc(packer)

end subroutine setUp

@After
subroutine tearDown()

  call post_proc%finalize()
  call packer%finalize()

end subroutine tearDown

@Test
subroutine MGPostProc_accum()

  real(r8), target :: unpacked_data_1D(pcols)
  real(r8), target :: packed_data_1D(mgncol)
  real(r8), pointer :: unpacked_ptr_1D(:)
  real(r8), pointer :: packed_ptr_1D(:)

  real(r8), target :: unpacked_data_2D(pcols,pver)
  real(r8), target :: packed_data_2D(mgncol,nlev)
  real(r8), pointer :: unpacked_ptr_2D(:,:)
  real(r8), pointer :: packed_ptr_2D(:,:)

  real(r8) :: expected_data_1D(pcols)
  real(r8) :: expected_data_2D(pcols,pver)

  unpacked_ptr_1D => unpacked_data_1D
  packed_ptr_1D => packed_data_1D

  unpacked_ptr_2D => unpacked_data_2D
  packed_ptr_2D => packed_data_2D

  call post_proc%add_field(unpacked_ptr_1D, packed_ptr_1D, fillvalue, &
       accum_null)
  call post_proc%add_field(unpacked_ptr_2D, packed_ptr_2D)

  packed_data_1D = test_ref(:,1,1)
  packed_data_2D = test_ref(:,:,1)

  call post_proc%accumulate()

  packed_data_1D = test_ref(:,1,2)
  packed_data_2D = test_ref(:,:,2)

  call post_proc%accumulate()

  call post_proc%process_and_unpack()

  expected_data_1D = packer%unpack(test_ref(:,1,2), fillvalue)
  expected_data_2D = packer%unpack(test_ref_mean, 0._r8)

  @assertEqual(expected_data_1D, unpacked_data_1D)
  @assertEqual(expected_data_2D, unpacked_data_2D)

end subroutine MGPostProc_accum

@Test
subroutine MGPostProc_unpack_only()

  real(r8), target :: unpacked_data_1D(pcols)
  real(r8), target :: packed_data_1D(mgncol)
  real(r8), pointer :: unpacked_ptr_1D(:)
  real(r8), pointer :: packed_ptr_1D(:)

  real(r8), target :: unpacked_data_2D(pcols,pver)
  real(r8), target :: packed_data_2D(mgncol,nlev)
  real(r8), pointer :: unpacked_ptr_2D(:,:)
  real(r8), pointer :: packed_ptr_2D(:,:)

  real(r8) :: expected_data_1D(pcols)
  real(r8) :: expected_data_2D(pcols,pver)

  unpacked_ptr_1D => unpacked_data_1D
  packed_ptr_1D => packed_data_1D

  unpacked_ptr_2D => unpacked_data_2D
  packed_ptr_2D => packed_data_2D

  call post_proc%add_field(unpacked_ptr_1D, packed_ptr_1D, fillvalue, &
       accum_null)
  call post_proc%add_field(unpacked_ptr_2D, packed_ptr_2D)

  packed_data_1D = test_ref(:,1,1)
  packed_data_2D = test_ref(:,:,1)

  call post_proc%accumulate()

  packed_data_1D = test_ref(:,1,2)
  packed_data_2D = test_ref(:,:,2)

  call post_proc%accumulate()

  call post_proc%unpack_only()

  expected_data_1D = packer%unpack(test_ref(:,1,2), fillvalue)
  expected_data_2D = packer%unpack(test_ref(:,:,2), 0._r8)

  @assertEqual(expected_data_1D, unpacked_data_1D)
  @assertEqual(expected_data_2D, unpacked_data_2D)

end subroutine MGPostProc_unpack_only

end module test_MGPostProc
